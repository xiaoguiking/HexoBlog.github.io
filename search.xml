<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>react搭建MPA多页面应用实战记录</title>
      <link href="/2020/04/12/react%E6%90%AD%E5%BB%BAMPA%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/04/12/react%E6%90%AD%E5%BB%BAMPA%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="create-react-app创建的项目配置多入口MPA模式"><a href="#create-react-app创建的项目配置多入口MPA模式" class="headerlink" title="create-react-app创建的项目配置多入口MPA模式"></a>create-react-app创建的项目配置多入口MPA模式</h1><blockquote><p>bug: 报Cannot read property ‘filter’ of undefined ——- fix bug</p></blockquote><blockquote><p>原文参考感谢 一只小鸟er  原文链接：<a href="https://blog.csdn.net/qq_36400206/java/article/details/103074375" target="_blank" rel="noopener">https://blog.csdn.net/qq_36400206/java/article/details/103074375</a></p></blockquote><h2 id="一-首先yarn-eject项目"><a href="#一-首先yarn-eject项目" class="headerlink" title="一.首先yarn eject项目"></a>一.首先<code>yarn eject</code>项目</h2><p>执行<code>create-react-app code</code>，安装react项目，这时候的<code>package.json</code>已经集成了所有的逻辑，需要个性化配置，需要执行<code>yarn eject</code>将webpack配置文件拉出,文件树大致如下</p><ul><li><p>code根目录文件夹</p><ul><li><p>build</p></li><li><p>config 执行yarn eject出现的文件夹</p></li><li><p>node_modules</p></li><li><p>public</p></li><li><p>scripts 执行yarn eject 结果</p></li><li><p>src</p></li><li><p>package-lock.json</p></li><li><p>package.json</p></li></ul></li></ul><h2 id="二-配置webpack文件"><a href="#二-配置webpack文件" class="headerlink" title="二.配置webpack文件"></a>二.配置webpack文件</h2><p>1.在<code>config/webpack.config</code>里面找到配置入口文件<code>entry</code>入口处，需要改成对象形式</p><p><strong>单页面修改前</strong></p><pre class=" language-react"><code class="language-react">    entry:[         paths.appIndexJs,          isEnvDevelopment && require.resolve('react-dev-utils/webpackHotDevClient')         ].filter(Boolean),</code></pre><p><strong>多页面修改后</strong></p><pre class=" language-react"><code class="language-react"> entry:{      index: [paths.appIndexJs, isEnvDevelopment && require.resolve('react-dev-utils/webpackHotDevClient')].filter(Boolean),      query: [paths.appQueryJs, isEnvDevelopment && require.resolve('react-dev-utils/webpackHotDevClient')].filter(Boolean),      ticket: [paths.appTicketJs, isEnvDevelopment && require.resolve('react-dev-utils/webpackHotDevClient')].filter(Boolean),      order: [paths.appOrderJs, isEnvDevelopment && require.resolve('react-dev-utils/webpackHotDevClient')].filter(Boolean),    },原文链接：https://blog.csdn.net/qq_36400206/java/article/details/103074375</code></pre><p>2.入口文件路径在<code>config/paths.js</code>,项目中需要将几个文件单独放在新建的单独文件夹中，</p><p>分别放在index， order ticket query 的index.js</p><ul><li><p>index文件夹</p><ul><li>index.js</li><li>App.js</li><li>index.css</li><li>App.css</li></ul></li><li><p>order</p><ul><li><p>index.js</p></li><li><p>App.js</p></li></ul></li></ul><p>3.<strong>config/paths.js</strong></p><pre class=" language-react"><code class="language-react">  //  多个应用配置 start  appHtml: resolveApp('public/index.html'),  appQueryHtml: resolveApp('public/query.html'),  appOrderHtml: resolveApp('public/order.html'),  appTicketHtml: resolveApp('public/ticket.html'),  appIndexJs: resolveModule(resolveApp, 'src/index/index'),  appQueryJs: resolveModule(resolveApp, 'src/query/index'),  appTicketJs: resolveModule(resolveApp, 'src/ticket/index'),  appOrderJs: resolveModule(resolveApp, 'src/order/index'),  // 多个应用配置</code></pre><p>4.最后修改 最后修改HtmlWebpackPlugin，生成四个不同的html引入这些入口打包后的文件。生成几个页面，就要配置几个HtmlWebpackPlugin，filename为最后的html名称，chunkwei所引用的打包文件。 </p><pre class=" language-react"><code class="language-react">    new HtmlWebpackPlugin(        Object.assign(          {},          {            inject: true,            template: paths.appHtml,            filename: 'index.html',            chunk: ['index'],          },          isEnvProduction            ? {                minify: {                  removeComments: true,                  collapseWhitespace: true,                  removeRedundantAttributes: true,                  useShortDoctype: true,                  removeEmptyAttributes: true,                  removeStyleLinkTypeAttributes: true,                  keepClosingSlash: true,                  minifyJS: true,                  minifyCSS: true,                  minifyURLs: true,                },              }            : undefined        )      ),      new HtmlWebpackPlugin(        Object.assign(          {},          {            inject: true,            template: paths.appHtml,            filename: 'query.html',            chunk: ['query'],          },          isEnvProduction            ? {                minify: {                  removeComments: true,                  collapseWhitespace: true,                  removeRedundantAttributes: true,                  useShortDoctype: true,                  removeEmptyAttributes: true,                  removeStyleLinkTypeAttributes: true,                  keepClosingSlash: true,                  minifyJS: true,                  minifyCSS: true,                  minifyURLs: true,                },              }            : undefined        )      ),</code></pre><p>5<code>public</code>创建4个模板</p><pre class=" language-react"><code class="language-react">- public    index.html    query.html    order.html    ticket.html</code></pre><h2 id="三-运行打包命令-yarn-build"><a href="#三-运行打包命令-yarn-build" class="headerlink" title="三.运行打包命令 yarn build"></a>三.运行打包命令 yarn build</h2><pre class=" language-js"><code class="language-js">yarn buildyarn run v1<span class="token number">.22</span><span class="token punctuation">.</span><span class="token number">4</span>$ node scripts<span class="token operator">/</span>build<span class="token punctuation">.</span>jsCreating an optimized production build<span class="token operator">...</span>Failed to compile<span class="token punctuation">.</span>Cannot read property <span class="token string">'filter'</span> <span class="token keyword">of</span> undefinederror Command failed <span class="token keyword">with</span> exit code <span class="token number">1</span><span class="token punctuation">.</span>info Visit https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>yarnpkg<span class="token punctuation">.</span>com<span class="token operator">/</span>en<span class="token operator">/</span>docs<span class="token operator">/</span>cli<span class="token operator">/</span>run <span class="token keyword">for</span> documentation about <span class="token keyword">this</span> command<span class="token punctuation">.</span></code></pre><h2 id="四错误原因"><a href="#四错误原因" class="headerlink" title="四错误原因"></a>四错误原因</h2><pre><code>ManifestPlugin这个插件的作用是生成一份.json的文件，通过该文件的映射关系可以让我们知道webpack是如何追踪所有模块并映射到输出bundle中的。我们先来看原始的配置,这里fileName设置了输出文件名asset-manifest.json，publicPath设置了输出路径，最终要的是最后一个generate参数，自定义了输出的内容，里面有一段是取entrypoints.main，这是针对单一入口的配置，因为单一入口不指定name的情况默认name为main，当改成多入口的方式了之后这里面在entrypoints中自然是读取不到main这个值的，因此就报错，这里将generate这个参数去掉，恢复其默认值即可，或者将entrypoints这个key去掉。</code></pre><p>注释解决后</p><pre class=" language-js"><code class="language-js">      <span class="token keyword">new</span> <span class="token class-name">ManifestPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        fileName<span class="token punctuation">:</span> <span class="token string">'asset-manifest.json'</span><span class="token punctuation">,</span>        publicPath<span class="token punctuation">:</span> publicPath<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// generate: (seed, files, entrypoints) => {</span>        <span class="token comment" spellcheck="true">//   const manifestFiles = files.reduce((manifest, file) => {</span>        <span class="token comment" spellcheck="true">//     manifest[file.name] = file.path;</span>        <span class="token comment" spellcheck="true">//     return manifest;</span>        <span class="token comment" spellcheck="true">//   }, seed);</span>        <span class="token comment" spellcheck="true">//   const entrypointFiles = entrypoints.main.filter(</span>        <span class="token comment" spellcheck="true">//     fileName => !fileName.endsWith('.map')</span>        <span class="token comment" spellcheck="true">//   );</span>        <span class="token comment" spellcheck="true">//   return {</span>        <span class="token comment" spellcheck="true">//     files: manifestFiles,</span>        <span class="token comment" spellcheck="true">//     entrypoints: entrypointFiles,</span>        <span class="token comment" spellcheck="true">//   };</span>        <span class="token comment" spellcheck="true">// },</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化盘点（三）</title>
      <link href="/2020/04/11/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9B%98%E7%82%B9%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2020/04/11/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9B%98%E7%82%B9%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="HTML-CSS-Js-页面加载渲染过程"><a href="#HTML-CSS-Js-页面加载渲染过程" class="headerlink" title="HTML/CSS/Js 页面加载渲染过程"></a>HTML/CSS/Js 页面加载渲染过程</h3><blockquote><p>一个网站在浏览器端如何进行渲染？</p></blockquote><p><img src="images%5CHTML%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B.png" alt=""></p><p><strong>渲染分解解析过程</strong></p><ul><li>1.html解析DOM tree</li><li>2.css解析出Style Rules</li><li>3.将二者关联生成Render Tree</li><li>4.Layout根据render Tree 计算每个节点的信息</li><li>5.Painting根据计算好的信息绘制整个页面</li></ul><h3 id="HTML渲染过程的特性"><a href="#HTML渲染过程的特性" class="headerlink" title="HTML渲染过程的特性"></a>HTML渲染过程的特性</h3><ul><li>顺序执行并发加载<ul><li>词法分析</li><li>并发加载</li><li>并发上限</li></ul></li><li>是否阻塞<ul><li>css head 阻塞额页面渲染 推荐link引入</li><li>css阻塞js执行 ，操作dom对于css修改</li><li>css不阻塞外部脚步加载</li><li>直接引入的js阻塞页面的渲染 <script> document.write 修改页面结构</li><li>js不阻塞资源的加载</li><li>js顺序执行，阻塞后续js逻辑的执行</li></ul></li><li>依赖关系</li><li>引入方式</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react生命周期</title>
      <link href="/2020/04/11/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2020/04/11/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化盘点（二）</title>
      <link href="/2020/04/10/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9B%98%E7%82%B9%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/04/10/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9B%98%E7%82%B9%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="页面性能优化02-图片"><a href="#页面性能优化02-图片" class="headerlink" title="页面性能优化02-图片"></a>页面性能优化02-图片</h2><h3 id="1-png8-png24-png32-区别"><a href="#1-png8-png24-png32-区别" class="headerlink" title="1 .png8/png24/png32 区别"></a>1 .png8/png24/png32 区别</h3><ul><li>png8 ———- 256色，支持透明</li><li>png24 ———  2-24 色， 不支持透明</li><li>png32 ——— 2– 24色， 支持透明</li></ul><h3 id="2-图片相关的优化-不同格式图片常用的业务场景"><a href="#2-图片相关的优化-不同格式图片常用的业务场景" class="headerlink" title="2. 图片相关的优化- 不同格式图片常用的业务场景"></a>2. 图片相关的优化- 不同格式图片常用的业务场景</h3><ul><li>jpg有损压缩，压缩率高，不支持透明，不需要支持透明图片场景</li><li>png支持透明，浏览器兼容好，大部分需要透明场景</li><li>webp压缩程度更好，在ios webview 有兼容性问题  安卓</li><li>svg矢量图，代码内嵌，相对较小，图片样式相对简单场景</li></ul><h3 id="3-图片压缩"><a href="#3-图片压缩" class="headerlink" title="3.图片压缩"></a>3.图片压缩</h3><ul><li>Css雪碧图</li></ul><pre><code>把网站用的一些小图片整合到一张单独的图片中， 减少网站http的请求数量缺点： 整合图片较大，一次加载比较慢</code></pre><ul><li><p>Image内嵌</p><pre><code>通过base64 将图片的内容内嵌到html当中减少网站http请求</code></pre></li><li><p>使用矢量图svg</p><pre><code>使用字体图片iconfont</code></pre></li><li><p>安卓下使用webp</p></li></ul><h3 id="4-图片压缩使用"><a href="#4-图片压缩使用" class="headerlink" title="4.图片压缩使用"></a>4.图片压缩使用</h3><ul><li><p>智图网站转换 jpg变成 webp</p></li><li><p>雪碧图制作 <a href="http://www.spritecow.com/" target="_blank" rel="noopener">http://www.spritecow.com/</a> </p></li><li><p>svg</p><pre><code>通过svg 标签内嵌引入&lt;svg  xmlns=&quot;&quot;/&gt;</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化盘点（一）</title>
      <link href="/2020/04/09/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9B%98%E7%82%B9%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/04/09/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9B%98%E7%82%B9%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前端性能优化（盘点一）"><a href="#前端性能优化（盘点一）" class="headerlink" title="前端性能优化（盘点一）"></a>前端性能优化（盘点一）</h1><p><strong>前端性能优化</strong></p><ul><li>网络层面</li><li>构建层面</li><li>浏览器渲染层面</li><li>服务端层面</li></ul><p><strong>功能区分</strong></p><ul><li><p>资源合并与压缩</p></li><li><p>图片的编码原理和类型选择</p></li><li><p>浏览器的渲染机制</p></li><li><p>濑加载预加载</p></li><li><p>浏览器存储</p></li><li><p>缓存机制</p></li><li><p>PWA</p></li><li><p>Vue-ssr </p></li></ul><h2 id="1-资源合并与压缩"><a href="#1-资源合并与压缩" class="headerlink" title="1.资源合并与压缩"></a>1.资源合并与压缩</h2><h3 id="http请求过程中性能优化"><a href="#http请求过程中性能优化" class="headerlink" title="http请求过程中性能优化"></a>http请求过程中性能优化</h3><blockquote><p>浏览器的一个请求从发送到返回都经历了什么</p></blockquote><ul><li>输入url</li><li>经过domain 到dns 服务器</li><li>dns服务器经过ip 到浏览器</li><li>浏览器经过（局域网—- 交换机—  路由器 —  主干网络）</li><li>调用Model 获取 数据 通过View 回返</li><li>render 渲染到浏览器 ， dom树 + css 树 </li><li>最终渲染</li></ul><p>优化点： </p><ul><li>DNS是否可以通过缓存减少dns查询时间</li><li>CDN 解决缓存问题（静态资源） — cookie， 域名注意</li><li>网络请求的过程走的网络环境？</li><li>相同的静态资源缓存问题</li><li>能否减少请求http请求大小</li><li>减少http请求</li><li>服务端渲染</li></ul><h3 id="2-资源的合并与压缩-—-Html-Css-Js"><a href="#2-资源的合并与压缩-—-Html-Css-Js" class="headerlink" title="2.资源的合并与压缩 —  Html/Css/Js"></a>2.资源的合并与压缩 —  Html/Css/Js</h3><ul><li>html/css/js 压缩</li><li>文件合并</li><li>开启gzip</li></ul><blockquote><p>html压缩： 主要是浏览器环境中空格等的压缩</p></blockquote><p><strong>Js压缩</strong></p><ul><li>无效字符删除</li><li>代码语义优化</li><li>删除注释</li></ul><p><strong>html/css压缩方式</strong></p><ul><li>使用在线网站</li><li>node— html-minifier 工具包</li><li>后端模板引擎渲染压缩</li><li>clean-css(限定css)</li><li>uglifyjs2(js压缩)</li></ul><h3 id="3-文件合并"><a href="#3-文件合并" class="headerlink" title="3.文件合并"></a>3.文件合并</h3><p>不合并问题：</p><ul><li>增加网络延迟</li><li>容易丢包</li><li>经过代理服务器可能会被断开</li></ul><p>合并问题： </p><ul><li>首屏渲染问题</li><li>缓存失效问题</li></ul><p><strong>文件合并</strong></p><ul><li>node.js</li><li>在线网站</li><li>webpack</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试</title>
      <link href="/2020/04/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/04/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络</title>
      <link href="/2020/04/09/%E7%BD%91%E7%BB%9C/"/>
      <url>/2020/04/09/%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li>HTTP<ul><li>常见的状态码那些</li><li>304表示什么和302区别</li><li>介绍一下HTTP缓存策略</li><li>Connection为keep-alive表示什么</li></ul></li><li>DNS<ul><li>介绍DNS</li></ul></li><li>TCP<ul><li>三次握手</li><li>四次挥手</li></ul></li><li>HTTPS<ul><li>介绍HTTPS工作原理</li><li>HTTPS和http区别</li></ul></li><li>CDN<ul><li>介绍CDN是什么以及使用场景</li><li>CDN回源是什么</li></ul></li><li>从输入URL到展示，发生过程</li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status" target="_blank" rel="noopener">状态码学习</a></p><table><thead><tr><th>HTTP响应状态</th><th>含义</th></tr></thead><tbody><tr><td>100 — 199</td><td>信息响应</td></tr><tr><td>200 — 299</td><td>成功响应</td></tr><tr><td>300 —  399</td><td>重定向</td></tr><tr><td>400 — 499</td><td>客户端错误</td></tr><tr><td>500 — 599</td><td>服务端错误</td></tr></tbody></table><p><em>列举部分常用状态码</em></p><h3 id="信息响应"><a href="#信息响应" class="headerlink" title="信息响应"></a>信息响应</h3><ul><li><p>100 continue</p><p> 这个临时响应表明，迄今为止的所有内容都是可行的，客户端应该继续请求，如果已经完成，则忽略它 </p></li></ul><h3 id="成功响应"><a href="#成功响应" class="headerlink" title="成功响应"></a>成功响应</h3><ul><li><p>200 OK 请求成功 成功的含义取决于HTTP</p><ul><li>GET 资源已被提取并且在消息正文中传输</li><li>HEAD 实体标头位于消息正文中</li><li>POST 描述动作结果的资源在消息体中传输</li><li>TRACE 消息正文包含服务器收到的请求消息</li></ul></li><li><p>202 Accepted</p><p>请求已经接收到，但还未响应，没有结果。</p></li><li><p>204  Reset Content</p><p>服务器成功处理了请求，但不需要返回实体内容，并且希望返回更新了的元信息。</p></li></ul><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><ul><li><p>302 Fount </p><p>请求的资源现在临时从不同的URL响应请求</p></li><li><p>304 Not Modified</p><p>如果客户端发送了一个带条件的GET请求，且该请求已经被允许，而文档内容（自上次访问以来或者根据请求的条件），并没有改变，则服务区应当返回这个状态码。</p></li></ul><h3 id="客户端响应"><a href="#客户端响应" class="headerlink" title="客户端响应"></a>客户端响应</h3><ul><li><p>400 Bad Request </p><p> 1.语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重置提交请求</p><p> 2.请求参数错误。</p></li><li><p>403 Forbidden 服务器理解请求，但是拒绝执行他。</p></li><li><p>404 Not Found</p><p> 请求失败，请求所希望得到的资源没有在服务器上发现。</p></li></ul><ul><li><p>429 Too many Requests</p><p> 用户在给定时间内发送了太多请求</p></li></ul><h3 id="服务端响应"><a href="#服务端响应" class="headerlink" title="服务端响应"></a>服务端响应</h3><ul><li><p>500  Internal Server Error</p><p> 服务器遇到了不知道如何处理的情况</p></li><li><p>502 bad getWay</p><p> 服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。</p></li><li><p>503 Service Unavailable</p><p>  服务器没有准备好处理请求 </p></li></ul><ul><li><p>504 Getway  Timeout</p><p>   当服务器作为网关，不能及时得到响应返回错误代码</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My New blog</title>
      <link href="/2020/04/08/My-New-blog/"/>
      <url>/2020/04/08/My-New-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="程序员搭建技术博客神器-Hexo-github"><a href="#程序员搭建技术博客神器-Hexo-github" class="headerlink" title="程序员搭建技术博客神器 Hexo + github"></a>程序员搭建技术博客神器 Hexo + github</h2><h2 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h3 id="安装前提准备"><a href="#安装前提准备" class="headerlink" title="安装前提准备"></a>安装前提准备</h3><ul><li>Node.js &gt; 8.10(建议使用Node.js及以上版本)</li><li>Git </li></ul><h3 id="Git安装指导"><a href="#Git安装指导" class="headerlink" title="Git安装指导"></a>Git安装指导</h3><ul><li>Windows：下载并安装 git.</li><li>Mac：使用 Homebrew, - MacPorts 或者下载 安装程序。</li><li>Linux (Ubuntu, Debian)：sudo apt-get install git-core</li><li>Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core</li></ul><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>全局安装</p><blockquote><p>npm install -g hexo-cli</p></blockquote><h3 id="进阶安装使用"><a href="#进阶安装使用" class="headerlink" title="进阶安装使用"></a>进阶安装使用</h3><p>局部指定文件夹目录安装</p><blockquote><p>npm install hexo</p></blockquote><h3 id="启动运行"><a href="#启动运行" class="headerlink" title="启动运行"></a>启动运行</h3><pre><code>$ hexo server 执行命令INFO  Start processingINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop</code></pre><h3 id="打包上传三步走"><a href="#打包上传三步走" class="headerlink" title="打包上传三步走"></a>打包上传三步走</h3><pre><code>hexo cleanhexo generatehexo deploy</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/07/hello-world/"/>
      <url>/2020/04/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
